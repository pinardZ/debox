// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: bsc.proto

package proto

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"math"
)

import (
	"context"
	"github.com/micro/go-micro/v2/api"
	"github.com/micro/go-micro/v2/client"
	"github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BSCService service

func NewBSCServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BSCService service

type BSCService interface {
	AccountBalance(ctx context.Context, in *ReqAccountBalance, opts ...client.CallOption) (*RespAccountBalance, error)
}

type bSCService struct {
	c    client.Client
	name string
}

func NewBSCService(name string, c client.Client) BSCService {
	return &bSCService{
		c:    c,
		name: name,
	}
}

func (c *bSCService) AccountBalance(ctx context.Context, in *ReqAccountBalance, opts ...client.CallOption) (*RespAccountBalance, error) {
	req := c.c.NewRequest(c.name, "BSCService.AccountBalance", in)
	out := new(RespAccountBalance)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BSCService service

type BSCServiceHandler interface {
	AccountBalance(context.Context, *ReqAccountBalance, *RespAccountBalance) error
}

func RegisterBSCServiceHandler(s server.Server, hdlr BSCServiceHandler, opts ...server.HandlerOption) error {
	type bSCService interface {
		AccountBalance(ctx context.Context, in *ReqAccountBalance, out *RespAccountBalance) error
	}
	type BSCService struct {
		bSCService
	}
	h := &bSCServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BSCService{h}, opts...))
}

type bSCServiceHandler struct {
	BSCServiceHandler
}

func (h *bSCServiceHandler) AccountBalance(ctx context.Context, in *ReqAccountBalance, out *RespAccountBalance) error {
	return h.BSCServiceHandler.AccountBalance(ctx, in, out)
}
